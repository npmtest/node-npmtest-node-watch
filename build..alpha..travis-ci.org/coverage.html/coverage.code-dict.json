{"/home/travis/build/npmtest/node-npmtest-node-watch/test.js":"/* istanbul instrument in package npmtest_node_watch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-watch/lib.npmtest_node_watch.js":"/* istanbul instrument in package npmtest_node_watch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_watch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_watch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-watch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-watch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_watch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_watch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_watch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_watch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_watch.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_watch.__dirname +\n                    '/lib.npmtest_node_watch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-watch/node_modules/node-watch/lib/watch.js":"var fs   = require('fs');\nvar path = require('path');\nvar os = require('os');\nvar util = require('util');\nvar events = require('events');\n\nvar hasNativeRecursive = require('./has-native-recursive');\nvar is = require('./is');\n\nvar EVENT_UPDATE = 'update';\nvar EVENT_REMOVE = 'remove';\n\nfunction makeArray(arr, offset) {\n  return is.array(arr)\n    ? arr : [].slice.call(arr, offset || 0);\n}\n\nfunction hasDup(arr) {\n  return makeArray(arr).some(function(v, i, self) {\n    return self.indexOf(v) !== i;\n  });\n}\n\nfunction unique(arr) {\n  return makeArray(arr).filter(function(v, i, self) {\n    return self.indexOf(v) === i;\n  });\n}\n\nfunction assign(obj/*, props */) {\n  if (Object.assign) {\n    return Object.assign.apply(Object, arguments);\n  }\n  return makeArray(arguments, 1)\n    .reduce(function(mix, prop) {\n      for (var name in prop) {\n        if (prop.hasOwnProperty(name)) {\n          mix[name] = prop[name];\n        }\n      }\n      return mix;\n    }, obj);\n}\n\nfunction guard(fn) {\n  return function(arg, action) {\n    if (is.func(fn)) {\n      if (fn(arg)) action();\n    } else {\n      action();\n    }\n  }\n}\n\nfunction composeMessage(names) {\n  return makeArray(names).map(function(n) {\n    if (!is.exists(n)) return [EVENT_REMOVE, n];\n    else return [EVENT_UPDATE, n];\n  });\n}\n\nfunction getMessages(cache) {\n  var dup = hasDup(cache.map(function(c) {\n    return c.replace(/^[~#]+|[~#]+$/, '');\n  }));\n\n  // saving file from an editor maybe?\n  if (dup) {\n    var filtered = cache.filter(function(m) {\n      return is.exists(m)\n    });\n    return composeMessage(unique(filtered));\n  }\n  else {\n    return composeMessage(cache);\n  }\n}\n\nfunction debounce(fn, delay) {\n  var timer, cache = [];\n  var info = fn.info;\n  function handle() {\n    getMessages(cache).forEach(function(msg) {\n      fn.apply(null, msg);\n    });\n    timer = null;\n    cache = [];\n  }\n  return function(evt, name) {\n    if (is.nil(name)) {\n      name = '';\n    }\n    cache.push(\n      path.join(info.fpath, name)\n    );\n    if (!timer) {\n      timer = setTimeout(handle, delay || 200);\n    }\n  }\n}\n\nfunction getSubDirectories(dir, fn) {\n  if (is.directory(dir)) {\n    fs.readdir(dir, function(err, all) {\n      if (err) {\n        // don't throw permission errors.\n        if (!/^(EPERM|EACCES)$/.test(err.code)) throw err;\n        else console.warn('Warning: Cannot access %s.', dir);\n      }\n      else if (is.array(all)) {\n        all.forEach(function(f) {\n          var sdir = path.join(dir, f);\n          if (is.directory(sdir)) fn(sdir);\n        });\n      }\n    });\n  }\n}\n\nconst deprecateWarning = util.deprecate(\n  function() {},\n  '(node-watch) First param in callback function\\\n  is replaced with event name since 0.5.0, use\\\n  `(evt, filename) => {}` if you want to get the filename'\n);\n\nfunction Watcher() {\n  events.EventEmitter.call(this);\n  this.watchers = {};\n}\n\nutil.inherits(Watcher, events.EventEmitter);\n\nWatcher.prototype.expose = function() {\n  var self = this;\n  var methods = [\n    'on', 'emit', 'close', 'isClosed', 'listeners', 'once',\n    'setMaxListeners', 'getMaxListeners'\n  ];\n  return methods.reduce(function(expose, name) {\n    expose[name] = function() {\n      return self[name].apply(self, arguments);\n    }\n    return expose;\n  }, {});\n}\n\nWatcher.prototype.isClosed = function() {\n  return !Object.keys(this.watchers).length\n}\n\nWatcher.prototype.close = function(fullPath) {\n  var self = this;\n  if (fullPath) {\n    var watcher = this.watchers[fullPath];\n    if (watcher && watcher.close) {\n      watcher.close();\n      delete self.watchers[fullPath];\n    }\n    getSubDirectories(fullPath, function(fpath) {\n      self.close(fpath);\n    });\n  } else {\n    var self = this;\n    Object.keys(self.watchers).forEach(function(fpath) {\n      var watcher = self.watchers[fpath];\n      if (watcher && watcher.close) {\n        watcher.close();\n      }\n    });\n    this.watchers = {};\n  }\n};\n\nWatcher.prototype.add = function(watcher, info) {\n  var self = this;\n  info = info || {};\n  var fullPath = path.resolve(info.fpath);\n  this.watchers[fullPath] = watcher;\n\n  var callback = function(evt, name) {\n    if (info.options.recursive) {\n      hasNativeRecursive(function(has) {\n        if (!has) {\n          var fullPath = path.resolve(name);\n          // remove watcher on removal\n          if (evt == EVENT_REMOVE) {\n            self.close(fullPath);\n          }\n          // watch new created directory\n          else if (is.directory(name) && !self.watchers[fullPath]) {\n            var filterGuard = guard(info.options.filter);\n            filterGuard(name, function() {\n              self.watchDirectory(name, info.options);\n            });\n          }\n        }\n      });\n    }\n\n    // watch single file\n    if (info.compareName) {\n      if (info.compareName(name)) {\n        self.emit('change', evt, name);\n      }\n    }\n    // watch directory\n    else {\n      var filterGuard = guard(info.options.filter);\n      filterGuard(name, function() {\n        if (self.flag) self.flag = '';\n        else self.emit('change', evt, name);\n      });\n    }\n  };\n\n  callback.info = info;\n\n  watcher.on('error', function(err) {\n    if (os.platform() == 'win32' && err.code == 'EPERM') {\n      watcher.emit('change', EVENT_REMOVE, info.fpath && '');\n      self.flag = 'windows-error';\n      self.close(fullPath);\n    } else {\n     self.emit('error', err);\n    }\n  });\n\n  watcher.on('change', debounce(callback));\n}\n\nWatcher.prototype.watchFile = function(file, options, fn) {\n  var parent = path.join(file, '../');\n  var opts = assign({}, options, {\n    recursive: false,\n    filter: null\n  });\n\n  var watcher = fs.watch(parent, opts);\n  this.add(watcher, {\n    type: 'file',\n    fpath: parent,\n    options: opts,\n    compareName: function(n) {\n      return is.sameFile(n, file);\n    }\n  });\n\n  if (is.func(fn)) {\n    if (fn.length == 1) deprecateWarning();\n    this.on('change', fn);\n  }\n}\n\nWatcher.prototype.watchDirectory = function(dir, options, fn) {\n  var self = this;\n  hasNativeRecursive(function(has) {\n    options.recursive = !!options.recursive;\n    var opts = assign({}, options);\n    if (!has) {\n      opts = assign(opts, { recursive: false });\n    }\n    var watcher = fs.watch(dir, opts);\n\n    self.add(watcher, {\n      type: 'dir',\n      fpath: dir,\n      options: options\n    });\n\n    if (is.func(fn)) {\n      if (fn.length == 1) deprecateWarning();\n      self.on('change', fn);\n    }\n\n    if (options.recursive && !has) {\n      getSubDirectories(dir, function(d) {\n        var filterGuard = guard(options.filter);\n        filterGuard(d, function() {\n          self.watchDirectory(d, options);\n        });\n      });\n    }\n  });\n}\n\nfunction composeWatcher(watchers) {\n  var watcher = new Watcher();\n  watchers.forEach(function(w) {\n    w.on('change', function(evt, name) {\n      watcher.emit('change', evt, name);\n    });\n    w.on('error', function(err) {\n      watcher.emit('error', err);\n    });\n  });\n  watcher.close = function() {\n    watchers.forEach(function(w) {\n      w.close();\n    });\n  }\n  return watcher.expose();\n}\n\nfunction watch(fpath, options, fn) {\n  var watcher = new Watcher();\n\n  if (is.array(fpath)) {\n    return composeWatcher(unique(fpath).map(function(f) {\n      return watch(f, options, fn);\n    }));\n  };\n\n  if (!is.exists(fpath)) {\n    watcher.emit('error',\n      new Error(fpath + ' does not exist.')\n    );\n  }\n\n  if (is.func(options)) {\n    fn = options;\n    options = {};\n  }\n\n  if (arguments.length < 2) {\n    options = {};\n  }\n\n  if (is.file(fpath)) {\n    watcher.watchFile(fpath, options, fn);\n  }\n\n  else if (is.directory(fpath)) {\n    watcher.watchDirectory(fpath, options, fn);\n  }\n\n  return watcher.expose();\n}\n\nmodule.exports = watch;\n","/home/travis/build/npmtest/node-npmtest-node-watch/node_modules/node-watch/lib/has-native-recursive.js":"var fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar is = require('./is');\n\nvar IS_SUPPORT;\nvar TEMP_DIR = os.tmpdir && os.tmpdir()\n  || process.env.TMPDIR\n  || process.env.TEMP\n  || process.cwd();\n\nfunction TempStack() {\n  this.stack = [];\n}\n\nTempStack.prototype = {\n  create: function(type, base) {\n    var name = path.join(base,\n      'node-watch-' + Math.random().toString(16).substr(2)\n    );\n    this.stack.push({ name: name, type: type });\n    return name;\n  },\n  write: function(/* file */) {\n    for (var i = 0; i < arguments.length; ++i) {\n      fs.writeFileSync(arguments[i], ' ');\n    }\n  },\n  mkdir: function(/* dirs */) {\n    for (var i = 0; i < arguments.length; ++i) {\n      fs.mkdirSync(arguments[i]);\n    }\n  },\n  cleanup: function(fn) {\n    try {\n      var temp;\n      while (temp = this.stack.pop()) {\n        var type = temp.type;\n        var name = temp.name;\n        if (type == 'file' && is.file(name)) {\n          fs.unlinkSync(name);\n        }\n        else if (type == 'dir' && is.directory(name)) {\n          fs.rmdirSync(name);\n        }\n      }\n    }\n    finally {\n      if (is.func(fn)) fn();\n    }\n  }\n};\n\nvar pending = false;\n\nmodule.exports = function hasNativeRecursive(fn) {\n  if (!is.func(fn)) {\n    return false;\n  }\n  if (IS_SUPPORT !== undefined) {\n    return fn(IS_SUPPORT);\n  }\n\n  if (!pending) {\n    pending = true;\n  }\n  // check again later\n  else {\n    return setTimeout(function() {\n      hasNativeRecursive(fn);\n    }, 300);\n  }\n\n  var stack = new TempStack();\n  var parent = stack.create('dir', TEMP_DIR);\n  var child = stack.create('dir', parent);\n  var file = stack.create('file', child);\n\n  stack.mkdir(parent, child);\n\n  var options = { recursive: true };\n  var watcher = fs.watch(parent, options);\n  var timer = setTimeout(function() {\n    watcher.close();\n    stack.cleanup(function() {\n      fn(IS_SUPPORT = false);\n    });\n  }, 200);\n\n  watcher.on('change', function(evt, name) {\n    if (path.basename(file) == path.basename(name)) {\n      watcher.close();\n      clearTimeout(timer);\n      stack.cleanup(function() {\n        fn(IS_SUPPORT = true);\n      });\n    }\n  });\n  stack.write(file);\n}\n","/home/travis/build/npmtest/node-npmtest-node-watch/node_modules/node-watch/lib/is.js":"var fs = require('fs');\nvar path = require('path');\n\nvar is = {\n  nil: function(item) {\n    return (item === null) || (item === undefined);\n  },\n  array: function(item) {\n    return Array.isArray(item);\n  },\n  func: function(item) {\n    return typeof item === 'function';\n  },\n  exists: function(name) {\n    return fs.existsSync(name);\n  },\n  file: function(name) {\n    return is.exists(name)\n      ? fs.statSync(name).isFile() : false;\n  },\n  sameFile: function(a, b) {\n    return path.resolve(a) == path.resolve(b);\n  },\n  directory: function(name) {\n    return is.exists(name)\n      ? fs.statSync(name).isDirectory() : false;\n  },\n  symbolicLink: function(name) {\n    return is.exists(name)\n      ? fs.lstatSync(name).isSymbolicLink() : false;\n  }\n};\n\nmodule.exports = is;\n"}